/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, Optional } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { NgxUiLoaderService } from '../core/ngx-ui-loader.service';
import { NGX_UI_LOADER_HTTP_CONFIG_TOKEN } from './ngx-ui-loader-http-config.token';
import { HTTP_LOADER_ID } from './ngx-ui-loader-http.constants';
export class NgxUiLoaderHttpInterceptor {
    /**
     * Constructor
     * @param {?} config
     * @param {?} ngxUiLoaderService
     */
    constructor(config, ngxUiLoaderService) {
        this.ngxUiLoaderService = ngxUiLoaderService;
        this.count = 0;
        this.defaultConfig = {
            loaderId: this.ngxUiLoaderService.getDefaultConfig().masterLoaderId,
            showForeground: false
        };
        if (config) {
            if (config.exclude) {
                this.exclude = config.exclude.map(url => url.toLowerCase());
            }
            if (config.excludeRegexp) {
                this.excludeRegexp = config.excludeRegexp.map(regexp => new RegExp(regexp, 'i'));
            }
            this.defaultConfig = Object.assign({}, this.defaultConfig, config);
        }
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        if (this.isIgnored(req.url)) {
            return next.handle(req);
        }
        this.count++;
        if (this.defaultConfig.showForeground) {
            if (!this.ngxUiLoaderService.hasForeground(this.defaultConfig.loaderId, HTTP_LOADER_ID)) {
                this.ngxUiLoaderService.startLoader(this.defaultConfig.loaderId, HTTP_LOADER_ID);
            }
        }
        else {
            if (!this.ngxUiLoaderService.hasBackground(this.defaultConfig.loaderId, HTTP_LOADER_ID)) {
                this.ngxUiLoaderService.startBackgroundLoader(this.defaultConfig.loaderId, HTTP_LOADER_ID);
            }
        }
        return next.handle(req).pipe(finalize(() => {
            this.count--;
            if (this.count === 0) {
                if (this.defaultConfig.showForeground) {
                    this.ngxUiLoaderService.stopLoader(this.defaultConfig.loaderId, HTTP_LOADER_ID);
                }
                else {
                    this.ngxUiLoaderService.stopBackgroundLoader(this.defaultConfig.loaderId, HTTP_LOADER_ID);
                }
            }
        }));
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    isIgnored(url) {
        if (this.exclude) {
            // do not show the loader for api urls in the `exclude` list
            if (this.exclude.findIndex(str => url.toLowerCase().startsWith(str)) !== -1) {
                return true;
            }
        }
        if (this.excludeRegexp) {
            // do not show the loader for api urls which matches regexps in the `excludeRegexp` list
            if (this.excludeRegexp.findIndex(regexp => regexp.test(url)) !== -1) {
                return true;
            }
        }
        return false;
    }
}
NgxUiLoaderHttpInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgxUiLoaderHttpInterceptor.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_UI_LOADER_HTTP_CONFIG_TOKEN,] }] },
    { type: NgxUiLoaderService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderHttpInterceptor.prototype.count;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderHttpInterceptor.prototype.defaultConfig;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderHttpInterceptor.prototype.exclude;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderHttpInterceptor.prototype.excludeRegexp;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderHttpInterceptor.prototype.ngxUiLoaderService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVpLWxvYWRlci1odHRwLmludGVyY2VwdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXVpLWxvYWRlci8iLCJzb3VyY2VzIjpbImxpYi9odHRwL25neC11aS1sb2FkZXItaHR0cC5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzdELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUVwRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFHaEUsTUFBTSxPQUFPLDBCQUEwQjs7Ozs7O0lBWXJDLFlBQWlFLE1BQTZCLEVBQ3BGLGtCQUFzQztRQUF0Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBRTlDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixFQUFFLENBQUMsY0FBYztZQUNuRSxjQUFjLEVBQUUsS0FBSztTQUN0QixDQUFDO1FBRUYsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQzthQUM3RDtZQUNELElBQUksTUFBTSxDQUFDLGFBQWEsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcs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bmplY3RhYmxlLCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwSW50ZXJjZXB0b3IsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmluYWxpemUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE5neFVpTG9hZGVyU2VydmljZSB9IGZyb20gJy4uL2NvcmUvbmd4LXVpLWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IE5HWF9VSV9MT0FERVJfSFRUUF9DT05GSUdfVE9LRU4gfSBmcm9tICcuL25neC11aS1sb2FkZXItaHR0cC1jb25maWcudG9rZW4nO1xuaW1wb3J0IHsgTmd4VWlMb2FkZXJIdHRwQ29uZmlnIH0gZnJvbSAnLi9uZ3gtdWktbG9hZGVyLWh0dHAtY29uZmlnJztcbmltcG9ydCB7IEhUVFBfTE9BREVSX0lEIH0gZnJvbSAnLi9uZ3gtdWktbG9hZGVyLWh0dHAuY29uc3RhbnRzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5neFVpTG9hZGVySHR0cEludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcblxuICBwcml2YXRlIGNvdW50OiBudW1iZXI7XG4gIHByaXZhdGUgZGVmYXVsdENvbmZpZzogTmd4VWlMb2FkZXJIdHRwQ29uZmlnO1xuICBwcml2YXRlIGV4Y2x1ZGU6IHN0cmluZ1tdO1xuICBwcml2YXRlIGV4Y2x1ZGVSZWdleHA6IFJlZ0V4cFtdO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gY29uZmlnXG4gICAqIEBwYXJhbSBuZ3hVaUxvYWRlclNlcnZpY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTkdYX1VJX0xPQURFUl9IVFRQX0NPTkZJR19UT0tFTikgY29uZmlnOiBOZ3hVaUxvYWRlckh0dHBDb25maWcsXG4gICAgcHJpdmF0ZSBuZ3hVaUxvYWRlclNlcnZpY2U6IE5neFVpTG9hZGVyU2VydmljZSkge1xuXG4gICAgdGhpcy5jb3VudCA9IDA7XG4gICAgdGhpcy5kZWZhdWx0Q29uZmlnID0ge1xuICAgICAgbG9hZGVySWQ6IHRoaXMubmd4VWlMb2FkZXJTZXJ2aWNlLmdldERlZmF1bHRDb25maWcoKS5tYXN0ZXJMb2FkZXJJZCxcbiAgICAgIHNob3dGb3JlZ3JvdW5kOiBmYWxzZVxuICAgIH07XG5cbiAgICBpZiAoY29uZmlnKSB7XG4gICAgICBpZiAoY29uZmlnLmV4Y2x1ZGUpIHtcbiAgICAgICAgdGhpcy5leGNsdWRlID0gY29uZmlnLmV4Y2x1ZGUubWFwKHVybCA9PiB1cmwudG9Mb3dlckNhc2UoKSk7XG4gICAgICB9XG4gICAgICBpZiAoY29uZmlnLmV4Y2x1ZGVSZWdleHApIHtcbiAgICAgICAgdGhpcy5leGNsdWRlUmVnZXhwID0gY29uZmlnLmV4Y2x1ZGVSZWdleHAubWFwKHJlZ2V4cCA9PiBuZXcgUmVnRXhwKHJlZ2V4cCwgJ2knKSk7XG4gICAgICB9XG4gICAgICB0aGlzLmRlZmF1bHRDb25maWcgPSB7IC4uLnRoaXMuZGVmYXVsdENvbmZpZywgLi4uY29uZmlnIH07XG4gICAgfVxuICB9XG5cbiAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgaWYgKHRoaXMuaXNJZ25vcmVkKHJlcS51cmwpKSB7XG4gICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvdW50Kys7XG4gICAgaWYgKHRoaXMuZGVmYXVsdENvbmZpZy5zaG93Rm9yZWdyb3VuZCkge1xuICAgICAgaWYgKCF0aGlzLm5neFVpTG9hZGVyU2VydmljZS5oYXNGb3JlZ3JvdW5kKHRoaXMuZGVmYXVsdENvbmZpZy5sb2FkZXJJZCwgSFRUUF9MT0FERVJfSUQpKSB7XG4gICAgICAgIHRoaXMubmd4VWlMb2FkZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKHRoaXMuZGVmYXVsdENvbmZpZy5sb2FkZXJJZCwgSFRUUF9MT0FERVJfSUQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXRoaXMubmd4VWlMb2FkZXJTZXJ2aWNlLmhhc0JhY2tncm91bmQodGhpcy5kZWZhdWx0Q29uZmlnLmxvYWRlcklkLCBIVFRQX0xPQURFUl9JRCkpIHtcbiAgICAgICAgdGhpcy5uZ3hVaUxvYWRlclNlcnZpY2Uuc3RhcnRCYWNrZ3JvdW5kTG9hZGVyKHRoaXMuZGVmYXVsdENvbmZpZy5sb2FkZXJJZCwgSFRUUF9MT0FERVJfSUQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpLnBpcGUoZmluYWxpemUoKCkgPT4ge1xuICAgICAgdGhpcy5jb3VudC0tO1xuICAgICAgaWYgKHRoaXMuY291bnQgPT09IDApIHtcbiAgICAgICAgaWYgKHRoaXMuZGVmYXVsdENvbmZpZy5zaG93Rm9yZWdyb3VuZCkge1xuICAgICAgICAgIHRoaXMubmd4VWlMb2FkZXJTZXJ2aWNlLnN0b3BMb2FkZXIodGhpcy5kZWZhdWx0Q29uZmlnLmxvYWRlcklkLCBIVFRQX0xPQURFUl9JRCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5uZ3hVaUxvYWRlclNlcnZpY2Uuc3RvcEJhY2tncm91bmRMb2FkZXIodGhpcy5kZWZhdWx0Q29uZmlnLmxvYWRlcklkLCBIVFRQX0xPQURFUl9JRCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSk7XG4gIH1cblxuICBwcml2YXRlIGlzSWdub3JlZCh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLmV4Y2x1ZGUpIHtcbiAgICAgIC8vIGRvIG5vdCBzaG93IHRoZSBsb2FkZXIgZm9yIGFwaSB1cmxzIGluIHRoZSBgZXhjbHVkZWAgbGlzdFxuICAgICAgaWYgKHRoaXMuZXhjbHVkZS5maW5kSW5kZXgoc3RyID0+IHVybC50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoc3RyKSkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmV4Y2x1ZGVSZWdleHApIHtcbiAgICAgIC8vIGRvIG5vdCBzaG93IHRoZSBsb2FkZXIgZm9yIGFwaSB1cmxzIHdoaWNoIG1hdGNoZXMgcmVnZXhwcyBpbiB0aGUgYGV4Y2x1ZGVSZWdleHBgIGxpc3RcbiAgICAgIGlmICh0aGlzLmV4Y2x1ZGVSZWdleHAuZmluZEluZGV4KHJlZ2V4cCA9PiByZWdleHAudGVzdCh1cmwpKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iXX0=