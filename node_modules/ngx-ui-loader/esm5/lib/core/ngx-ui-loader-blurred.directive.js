/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { NgxUiLoaderService } from './ngx-ui-loader.service';
import { coerceNumber } from './coercion';
import { WAITING_FOR_OVERLAY_DISAPPEAR } from './ngx-ui-loader.contants';
var NgxUiLoaderBlurredDirective = /** @class */ (function () {
    function NgxUiLoaderBlurredDirective(elementRef, renderer, ngxUiLoaderService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.ngxUiLoaderService = ngxUiLoaderService;
        this.blurNumber = this.ngxUiLoaderService.getDefaultConfig().blur;
        this.loaderId = this.ngxUiLoaderService.getDefaultConfig().masterLoaderId;
    }
    Object.defineProperty(NgxUiLoaderBlurredDirective.prototype, "blur", {
        get: /**
         * @return {?}
         */
        function () {
            return this.blurNumber;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.blurNumber = coerceNumber(value, this.ngxUiLoaderService.getDefaultConfig().blur);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * On Init event
     */
    /**
     * On Init event
     * @return {?}
     */
    NgxUiLoaderBlurredDirective.prototype.ngOnInit = /**
     * On Init event
     * @return {?}
     */
    function () {
        var _this = this;
        this.showForegroundWatcher = this.ngxUiLoaderService.showForeground$
            .subscribe(function (data) {
            if (data.loaderId === _this.loaderId) {
                if (data.isShow) {
                    /** @type {?} */
                    var filterValue = "blur(" + _this.blurNumber + "px)";
                    _this.renderer.setStyle(_this.elementRef.nativeElement, '-webkit-filter', filterValue);
                    _this.renderer.setStyle(_this.elementRef.nativeElement, 'filter', filterValue);
                }
                else {
                    setTimeout(function () {
                        if (!_this.ngxUiLoaderService.hasForeground(data.loaderId)) {
                            _this.renderer.setStyle(_this.elementRef.nativeElement, '-webkit-filter', 'none');
                            _this.renderer.setStyle(_this.elementRef.nativeElement, 'filter', 'none');
                        }
                    }, WAITING_FOR_OVERLAY_DISAPPEAR);
                }
            }
        });
    };
    /**
     * On destroy event
     */
    /**
     * On destroy event
     * @return {?}
     */
    NgxUiLoaderBlurredDirective.prototype.ngOnDestroy = /**
     * On destroy event
     * @return {?}
     */
    function () {
        if (this.showForegroundWatcher) {
            this.showForegroundWatcher.unsubscribe();
        }
    };
    NgxUiLoaderBlurredDirective.decorators = [
        { type: Directive, args: [{ selector: '[ngxUiLoaderBlurred]' },] }
    ];
    /** @nocollapse */
    NgxUiLoaderBlurredDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgxUiLoaderService }
    ]; };
    NgxUiLoaderBlurredDirective.propDecorators = {
        blur: [{ type: Input }],
        loaderId: [{ type: Input }]
    };
    return NgxUiLoaderBlurredDirective;
}());
export { NgxUiLoaderBlurredDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderBlurredDirective.prototype.blurNumber;
    /** @type {?} */
    NgxUiLoaderBlurredDirective.prototype.loaderId;
    /** @type {?} */
    NgxUiLoaderBlurredDirective.prototype.showForegroundWatcher;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderBlurredDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderBlurredDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderBlurredDirective.prototype.ngxUiLoaderService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVpLWxvYWRlci1ibHVycmVkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC11aS1sb2FkZXIvIiwic291cmNlcyI6WyJsaWIvY29yZS9uZ3gtdWktbG9hZGVyLWJsdXJyZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQWEsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBRzNGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDMUMsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFekU7SUFrQkUscUNBQ1UsVUFBc0IsRUFDdEIsUUFBbUIsRUFDbkIsa0JBQXNDO1FBRnRDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBRTlDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDO1FBQ2xFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixFQUFFLENBQUMsY0FBYyxDQUFDO0lBQzVFLENBQUM7SUFwQkQsc0JBQ0ksNkNBQUk7Ozs7UUFEUjtZQUVFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN6QixDQUFDOzs7OztRQUVELFVBQVMsS0FBYTtZQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekYsQ0FBQzs7O09BSkE7SUFtQkQ7O09BRUc7Ozs7O0lBQ0gsOENBQVE7Ozs7SUFBUjtRQUFBLGlCQWtCQztRQWpCQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWU7YUFDakUsU0FBUyxDQUFDLFVBQUEsSUFBSTtZQUNiLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxLQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNuQyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7O3dCQUNULFdBQVcsR0FBRyxVQUFRLEtBQUksQ0FBQyxVQUFVLFFBQUs7b0JBQ2hELEtBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLGdCQUFnQixFQUFFLFdBQVcsQ0FBQyxDQUFDO29CQUNyRixLQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7aUJBQzlFO3FCQUFNO29CQUNMLFVBQVUsQ0FBQzt3QkFDVCxJQUFJLENBQUMsS0FBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7NEJBQ3pELEtBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxDQUFDOzRCQUNoRixLQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7eUJBQ3pFO29CQUNILENBQUMsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO2lCQUNuQzthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQ7O09BRUc7Ozs7O0lBQ0gsaURBQVc7Ozs7SUFBWDtRQUNFLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFO1lBQzlCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUMxQztJQUNILENBQUM7O2dCQXpERixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUU7Ozs7Z0JBUDNCLFVBQVU7Z0JBQW9CLFNBQVM7Z0JBR2xELGtCQUFrQjs7O3VCQVN4QixLQUFLOzJCQVNMLEtBQUs7O0lBNENSLGtDQUFDO0NBQUEsQUExREQsSUEwREM7U0F6RFksMkJBQTJCOzs7Ozs7SUFFdEMsaURBQTJCOztJQVczQiwrQ0FBMEI7O0lBRTFCLDREQUFvQzs7Ozs7SUFHbEMsaURBQThCOzs7OztJQUM5QiwrQ0FBMkI7Ozs7O0lBQzNCLHlEQUE4QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uRGVzdHJveSwgUmVuZGVyZXIyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBOZ3hVaUxvYWRlclNlcnZpY2UgfSBmcm9tICcuL25neC11aS1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBjb2VyY2VOdW1iZXIgfSBmcm9tICcuL2NvZXJjaW9uJztcbmltcG9ydCB7IFdBSVRJTkdfRk9SX09WRVJMQVlfRElTQVBQRUFSIH0gZnJvbSAnLi9uZ3gtdWktbG9hZGVyLmNvbnRhbnRzJztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW25neFVpTG9hZGVyQmx1cnJlZF0nIH0pXG5leHBvcnQgY2xhc3MgTmd4VWlMb2FkZXJCbHVycmVkRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIHByaXZhdGUgYmx1ck51bWJlcjogbnVtYmVyO1xuXG4gIEBJbnB1dCgpXG4gIGdldCBibHVyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuYmx1ck51bWJlcjtcbiAgfVxuXG4gIHNldCBibHVyKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLmJsdXJOdW1iZXIgPSBjb2VyY2VOdW1iZXIodmFsdWUsIHRoaXMubmd4VWlMb2FkZXJTZXJ2aWNlLmdldERlZmF1bHRDb25maWcoKS5ibHVyKTtcbiAgfVxuXG4gIEBJbnB1dCgpIGxvYWRlcklkOiBzdHJpbmc7XG5cbiAgc2hvd0ZvcmVncm91bmRXYXRjaGVyOiBTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIG5neFVpTG9hZGVyU2VydmljZTogTmd4VWlMb2FkZXJTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuYmx1ck51bWJlciA9IHRoaXMubmd4VWlMb2FkZXJTZXJ2aWNlLmdldERlZmF1bHRDb25maWcoKS5ibHVyO1xuICAgIHRoaXMubG9hZGVySWQgPSB0aGlzLm5neFVpTG9hZGVyU2VydmljZS5nZXREZWZhdWx0Q29uZmlnKCkubWFzdGVyTG9hZGVySWQ7XG4gIH1cblxuICAvKipcbiAgICogT24gSW5pdCBldmVudFxuICAgKi9cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zaG93Rm9yZWdyb3VuZFdhdGNoZXIgPSB0aGlzLm5neFVpTG9hZGVyU2VydmljZS5zaG93Rm9yZWdyb3VuZCRcbiAgICAgIC5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gICAgICAgIGlmIChkYXRhLmxvYWRlcklkID09PSB0aGlzLmxvYWRlcklkKSB7XG4gICAgICAgICAgaWYgKGRhdGEuaXNTaG93KSB7XG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJWYWx1ZSA9IGBibHVyKCR7dGhpcy5ibHVyTnVtYmVyfXB4KWA7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnLXdlYmtpdC1maWx0ZXInLCBmaWx0ZXJWYWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZmlsdGVyJywgZmlsdGVyVmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKCF0aGlzLm5neFVpTG9hZGVyU2VydmljZS5oYXNGb3JlZ3JvdW5kKGRhdGEubG9hZGVySWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJy13ZWJraXQtZmlsdGVyJywgJ25vbmUnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZmlsdGVyJywgJ25vbmUnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgV0FJVElOR19GT1JfT1ZFUkxBWV9ESVNBUFBFQVIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogT24gZGVzdHJveSBldmVudFxuICAgKi9cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuc2hvd0ZvcmVncm91bmRXYXRjaGVyKSB7XG4gICAgICB0aGlzLnNob3dGb3JlZ3JvdW5kV2F0Y2hlci51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19